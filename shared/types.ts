/**
 * Pocketbase Collection Types
 * 
 * These types match the Pocketbase collections defined in the database.
 * All collections extend BaseRecord which includes the standard Pocketbase fields.
 */

// Base Pocketbase record fields (auto-generated by Pocketbase)
export interface BaseRecord {
  id: string;
  created: string;  // ISO date string
  updated: string;  // ISO date string
}

/**
 * User Type
 * Built-in Pocketbase users collection
 */
export interface User extends BaseRecord {
  email: string;
  username: string;
  verified: boolean;
  emailVisibility?: boolean;
  avatar?: string;
}

/**
 * Knowledge Base Type
 * Represents a collection of documents with multi-user access
 */
export interface KnowledgeBase extends BaseRecord {
  name: string;
  description: string;
  users: string[];  // Array of user IDs with access to this KB
  // Stable ID for Qdrant filtering (uses the id field)
}

/**
 * Document Type
 * Represents a file uploaded to a knowledge base
 * Inherits permissions from parent KB (no separate user field)
 */
export interface Document extends BaseRecord {
  filename: string;           // System filename
  original_name: string;      // Original filename from upload
  knowledge_base: string;     // Relation to knowledge_bases collection
  file_type: FileType;
  file_size: number;          // Size in bytes
  processing_status: ProcessingStatus;
  progress_percentage: number;
  chunks_total: number;
  chunks_processed?: number;
  error_message?: string;
  qdrant_points: string[];    // Array of Qdrant point IDs for cleanup
}

/**
 * Processing Job Type
 * Tracks real-time progress of document processing
 */
export interface ProcessingJob extends BaseRecord {
  document_id: string;        // Relation to documents collection
  status: ProcessingStatus;
  progress: number;           // 0-100
  current_step: string;       // Human-readable current step
  total_steps?: number;
  completed_steps?: number;
  error_message?: string;
  started_at?: string;        // ISO date string
  completed_at?: string;      // ISO date string
}

/**
 * Status Enums
 */
export type ProcessingStatus = 
  | 'uploading'     // Initial upload in progress
  | 'processing'    // File being parsed
  | 'chunking'      // Content being chunked
  | 'embedding'     // Embeddings being created
  | 'completed'     // Successfully processed
  | 'failed';       // Processing failed

export type FileType = 
  | 'pdf' 
  | 'csv' 
  | 'text' 
  | 'audio';

/**
 * Expanded Document with Relations
 * Used when document is fetched with expanded relations
 */
export interface DocumentExpanded extends Document {
  expand?: {
    knowledge_base?: KnowledgeBase;
  };
}

/**
 * Expanded Knowledge Base with Relations
 * Used when KB is fetched with expanded user relations
 */
export interface KnowledgeBaseExpanded extends KnowledgeBase {
  expand?: {
    users?: User[];
  };
}

/**
 * Type Guards
 */
export function isProcessingStatus(status: string): status is ProcessingStatus {
  return ['uploading', 'processing', 'chunking', 'embedding', 'completed', 'failed'].includes(status);
}

export function isFileType(type: string): type is FileType {
  return ['pdf', 'csv', 'text', 'audio'].includes(type);
}

/**
 * Helper Types
 */
export type CreateKnowledgeBase = Omit<KnowledgeBase, keyof BaseRecord | 'users'> & {
  users?: string[];  // Optional on create, will default to current user
};

export type UpdateKnowledgeBase = Partial<Omit<KnowledgeBase, keyof BaseRecord | 'id'>>;

export type CreateDocument = Omit<Document, keyof BaseRecord | 'processing_status' | 'progress_percentage' | 'chunks_total' | 'chunks_processed' | 'qdrant_points'> & {
  processing_status?: ProcessingStatus;
  progress_percentage?: number;
  chunks_total?: number;
  qdrant_points?: string[];
};

export type UpdateDocument = Partial<Omit<Document, keyof BaseRecord | 'id'>>;
